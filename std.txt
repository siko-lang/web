module Bool where

data Bool = True | False deriving (PartialEq, Eq, PartialOrd, Ord, Show, Copy)

module Cell where

data Cell a = extern

instance (Show a) => Show Cell a where
    show cell = show (get cell)

create a :: a -> ~Cell ~a
create item = extern

take a :: Cell a -> ~a
take cell = extern 

put a :: Cell a -> a -> ~()
put cell item = extern

get a :: Cell a -> ~a
get cell = extern (arg[0].e[0] == *)

update a :: Cell a -> (a -> a) -> ()
update cell f = do
    item <- take cell
    new <- f item
    put cell new

module Char where

data Char = extern

instance PartialOrd Char where
    partialCmp a b = partialCmpChar a b

instance Ord Char where
    cmp a b = cmpChar a b

instance Eq Char

instance Copy Char

instance PartialEq Char where
    opEq a b = eqChar a b

instance Show Char where
    show a = showChar a

isUppercase :: ~Char -> ~Bool
isUppercase a = extern

partialCmpChar :: ~Char -> ~Char -> ~Option (~Ordering)
partialCmpChar a b = extern

cmpChar :: ~Char -> ~Char -> ~Ordering
cmpChar a b = extern

eqChar :: ~Char -> ~Char -> ~Bool
eqChar a b = extern

showChar :: ~Char -> ~String
showChar a = extern

module Either where

data Either a b = Left a | Right b deriving (PartialEq, Eq, PartialOrd, Ord, Show)

module Float(Float) where

data Float = extern

instance Copy Float

instance Add Float where
    opAdd a b = addFloat a b

instance Sub Float where
    opSub a b = subFloat a b

instance Mul Float where
    opMul a b = mulFloat a b

instance Div Float where
    opDiv a b = divFloat a b

instance PartialOrd Float where
    partialCmp a b = partialCmpFloat a b

instance PartialEq Float where
    opEq a b = eqFloat a b

instance Show Float where
    show a = showFloat a

instance Negative Float where
    opNegative a = negativeFloat a

addFloat :: ~Float -> ~Float -> ~Float
addFloat a b = extern

subFloat :: ~Float -> ~Float -> ~Float
subFloat a b = extern

mulFloat :: ~Float -> ~Float -> ~Float
mulFloat a b = extern

divFloat :: ~Float -> ~Float -> ~Float
divFloat a b = extern

eqFloat :: ~Float -> ~Float -> ~Bool
eqFloat a b = extern

showFloat :: ~Float -> ~String
showFloat a = extern

negativeFloat :: ~Float -> ~Float
negativeFloat a = extern

partialCmpFloat :: ~Float -> ~Float -> ~Option (~Ordering)
partialCmpFloat a b = extern

cmpFloat :: ~Float -> ~Float -> ~Ordering
cmpFloat a b = extern

module Int(Int, parse) where

data Int = extern

instance Add Int where
    opAdd a b = addInt a b

instance Sub Int where
    opSub a b = subInt a b

instance Mul Int where
    opMul a b = mulInt a b

instance Div Int where
    opDiv a b = divInt a b

instance PartialOrd Int where
    partialCmp a b = partialCmpInt a b

instance Ord Int where
    cmp a b = cmpInt a b

instance Eq Int

instance Copy Int

instance PartialEq Int where
    opEq a b = eqInt a b

instance Show Int where
    show a = showInt a

instance Negative Int where
    opNegative a = negativeInt a

addInt :: ~Int -> ~Int -> ~Int
addInt a b = extern

subInt :: ~Int -> ~Int -> ~Int
subInt a b = extern

mulInt :: ~Int -> ~Int -> ~Int
mulInt a b = extern

divInt :: ~Int -> ~Int -> ~Int
divInt a b = extern

eqInt :: ~Int -> ~Int -> ~Bool
eqInt a b = extern

showInt :: ~Int -> ~String
showInt a = extern

negativeInt :: ~Int -> ~Int
negativeInt a = extern

partialCmpInt :: ~Int -> ~Int -> ~Option (~Ordering)
partialCmpInt a b = extern

cmpInt :: ~Int -> ~Int -> ~Ordering
cmpInt a b = extern

parse :: ~String -> ~Option ~Int
parse s = extern

module IO where

readTextFile :: ~String -> ~String
readTextFile f = extern

writeTextFile :: ~String -> ~String -> ~()
writeTextFile f s = extern

getArgs :: ~[~String]
getArgs = extern

isDir :: String -> ~Bool
isDir path = extern

listDir :: String -> ~[~String]
listDir path = extern

module Iterator where

class Iterator a > b where
    next a b :: a -> (a, Option b)

data IteratorMap i1 a b = { inner :: i1,
                            f :: a -> b
                          }

instance (Iterator i1 > a) => Iterator (IteratorMap i1 a b) > b where
    next iter = do
        (inner, value) <- next iter.inner
        iter <- iter { inner = inner }
        case value of
            Some a -> do
                b <- iter.f a
                (iter, Some b)
            None -> (iter, None)

data IteratorFilter i1 a = { inner :: i1,
                             f :: a -> Bool
                           }

instance (Iterator i1 > a) => Iterator (IteratorFilter i1 a) > a where
    next i1 a :: IteratorFilter i1 a -> (IteratorFilter i1 a, Option a)
    next iter = do
        loop iter <- iter do
            iter :: IteratorFilter i1 a <- iter // FIXME
            (inner, value) <- next iter.inner
            iter <- iter { inner = inner }
            case value of
                Some n -> do
                    if iter.f n
                        then break (iter, Some n)
                        else iter
                None -> break (iter, None)

data IteratorFilterMap i1 a b = { inner :: i1,
                                  f :: a -> Option b
                                }

instance (Iterator i1 > a) => Iterator (IteratorFilterMap i1 a b) > b where
    next i1 a b :: IteratorFilterMap i1 a b -> (IteratorFilterMap i1 a b, Option b)
    next iter = do
        loop iter <- iter do
            iter :: IteratorFilterMap i1 a b <- iter // FIXME
            (inner, value) <- next iter.inner
            iter <- iter { inner = inner }
            case value of
                Some n -> do
                    case iter.f n of
                        Some n -> break (iter, Some n)
                        None -> iter
                None -> break (iter, None)

data IteratorZip i1 i2 = { iter1 :: i1,
                           iter2 :: i2
                         }

instance (Iterator i1 > a, Iterator i2 > b) => Iterator (IteratorZip i1 i2) > (a, b) where
    next i1 i2 a b :: IteratorZip i1 i2 -> (IteratorZip i1 i2, Option (a, b))
    next iter = do
        iter :: IteratorZip i1 i2 <- iter // FIXME
        (iter1, value1) <- next iter.iter1
        iter <- iter { iter1 = iter1 }
        case value1 of
            Some value1 -> do
                (iter2, value2) <- next iter.iter2
                iter <- iter { iter2 = iter2 }
                case value2 of
                    Some value2 -> (iter, Some (value1, value2))
                    None -> (iter, None)
            None -> (iter, None)

@Inline
map a b i1 :: (Iterator i1 > a) => (a -> b) -> i1 -> IteratorMap i1 a b
map f iter = IteratorMap iter f

@Inline
filter i1 a :: (Iterator i1 > a) => (a -> Bool) -> i1 -> IteratorFilter i1 a
filter f iter = IteratorFilter iter f

@Inline
filterMap i1 a b :: (Iterator i1 > a) => (a -> Option b) -> i1 -> IteratorFilterMap i1 a b
filterMap f iter = IteratorFilterMap iter f

@Inline
fold a b i1 :: (Iterator i1 > b) => (a -> b -> a) -> a -> i1 -> a
fold f s iter = do
    loop (s, iter) <- (s, iter) do
        (iter, value) <- next iter
        case value of
            Some n -> do
                s <- f s n
                (s, iter)
            None -> break s

@Inline
forEach i1 a :: (Iterator i1 > a) => (a -> ()) -> i1 -> ()
forEach f iter = do
    loop iter <- iter do
        (iter, value) <- next iter
        case value of
            Some n -> do
                f n
                iter
            None -> break ()

@Inline
zip i1 i2 a b :: (Iterator i1 > a, Iterator i2 > b) => i1 -> i2 -> IteratorZip i1 i2
zip iter1 iter2 = IteratorZip iter1 iter2

module List where

import Map

data List a = extern

instance (Show a) => Show [a] where
    show l = do
        subs <- List.map l show
        "[" + join subs ", " + "]"

instance (PartialEq a) => PartialEq [a] where
    opEq a :: [a] -> [a] -> Bool
    opEq a b =
        if getLength a != getLength b
        then False
        else do
            iter_a :: ListIter a <- List.iter a
            iter_b :: ListIter a <- List.iter b
            loop zipper <- Iterator.zip iter_a iter_b do
                zipper :: IteratorZip (ListIter a) (ListIter a) <- zipper // FIXME
                (zipper, item) <- Iterator.next zipper
                case item of
                    Some (item_a, item_b) ->
                        if item_a != item_b
                        then break False
                        else zipper
                    None -> break True

instance (Eq a) => Eq [a]

instance (PartialOrd a) => PartialOrd [a] where
    partialCmp a :: [a] -> [a] -> Option Ordering
    partialCmp a b = do
        len_a <- getLength a
        len_b <- getLength b
        if len_a != len_b
        then partialCmp len_a len_b
        else do
            iter_a :: ListIter a <- List.iter a
            iter_b :: ListIter a <- List.iter b
            loop zipper <- Iterator.zip iter_a iter_b do
                zipper :: IteratorZip (ListIter a) (ListIter a) <- zipper // FIXME
                (zipper, item) <- Iterator.next zipper
                case item of
                    Some (item_a, item_b) ->
                        case partialCmp item_a item_b of
                            Some Equal -> zipper
                            e -> break e
                    None -> break (Some Equal)

instance (Ord a) => Ord [a] where
    cmp a :: [a] -> [a] -> Ordering
    cmp a b = do
        len_a <- getLength a
        len_b <- getLength b
        if len_a != len_b
        then cmp len_a len_b
        else do
            iter_a :: ListIter a <- List.iter a
            iter_b :: ListIter a <- List.iter b
            loop zipper <- Iterator.zip iter_a iter_b do
                zipper :: IteratorZip (ListIter a) (ListIter a) <- zipper // FIXME
                (zipper, item) <- Iterator.next zipper
                case item of
                    Some (item_a, item_b) ->
                        case cmp item_a item_b of
                            Equal -> zipper
                            e -> break e
                    None -> break Equal

instance Add [a] where
    opAdd a b = addList a b

@Inline
empty a :: [a]
empty = withCapacity 0

addList a :: [a] -> [a] -> ~[a]
addList a b = extern

push a :: [a] -> a -> ~[a]
push l item = extern (arg[1] -> result.e[0],
                      arg[0].e[0] == result.e[0])
@Inline
last a :: [a] -> a
last l = atIndex l (getLength l - 1)

@Inline
removeLast a :: [a] -> (a, [a])
removeLast list = do
    i <- List.getLength list
    List.remove list (i - 1)

withCapacity a :: Int -> ~[a]
withCapacity capacity = extern

atIndex a :: [a] -> Int -> a
atIndex index l = extern (arg[0].e[0] -> result)

data ListIter a = { inner :: ListIterator a }

instance Iterator (ListIter a) > a where
    next iter = do
        (inner, item) <- List.nextItem iter.inner
        iter <- iter { inner = inner }
        case item of
            Some a -> (iter, Some a)
            None -> (iter, None)

@Inline
iter it a :: [a] -> ListIter a
iter l = ListIter (List.intoIter l)

data ListIterator a = extern (implicit)

intoIter a :: [a] -> ~ListIterator a
intoIter list = extern (arg[0] -> result.i[0])

nextItem a :: ListIterator a -> ~(~ListIterator a, ~Option a)
nextItem iter = extern (arg[0].i[0].e[0] -> result.f[1].v[0].f[0], 
                        arg[0].i[0] == result.f[0].i[0],
                        arg[0].i[0].e[0] == result.f[0].i[0].e[0])

@Inline
toList it a :: (Iterator it > a) => it -> [a]
toList iter = Iterator.fold (\list, item -> list + [item]) [] iter

getLength a :: [a] -> ~Int
getLength l = extern

isEmpty a :: [a] -> ~Bool
isEmpty l = extern

@Inline
contains a :: (PartialEq a) => [a] -> a -> Bool
contains l i = isSome (containsAtIndex l i)

@Inline
containsAtIndex a :: (PartialEq a) => [a] -> a -> Option Int
containsAtIndex l i = do
    loop index <- 0 do
        if index >= getLength l
        then break None
        else do
            e <- atIndex l index
            if e == i
            then break Some index
            else index + 1

@Inline
find a :: [a] -> (a -> Bool) -> Option a
find l f = do
    loop index <- 0 do
        if index >= getLength l
        then break None
        else do
            e <- atIndex l index
            if f e
            then break Some e
            else index + 1

join a :: (Show a) => [a] -> String -> String
join items separator = List.foldE (joiner separator) "" items
    where
        joiner a :: (Show a) => String -> String -> Int -> a -> String
        joiner separator state index item = case index of
            0 -> show item
            _ -> "{}{}{}" % (state, separator, item)

head a :: [a] -> Option a
head l = if isEmpty l then None else Some (atIndex l 0)

tail a :: [a] -> Option [a]
tail l = if isEmpty l
         then None
         else do
            (_, rest) <- List.remove l 0
            Some rest

remove a :: ~[~a] -> ~Int -> ~(~a, ~[~a])
remove l index = extern

pop a :: ~[a] -> ~Option ~(a, ~[a])
pop l = if isEmpty l
        then None
        else Some (List.remove l 0)

sort a :: (Ord a) => ~[a] -> ~[a]
sort l = extern

dedup a :: (PartialEq a) => ~[a] -> ~[a]
dedup l = extern

write a :: ~[a] -> ~Int -> ~a -> ~[a]
write l index item = extern

split a :: ~[a] -> ~Int -> ~(~[a], ~[a])
split l n = extern

@Inline
zip a b c :: [a] -> [b] -> (a -> b -> c) -> [c]
zip l1 l2 f = do
    if getLength l1 != getLength l2
        then panic "zip: length mismatch {} != {}" % (getLength l1, getLength l2)
        else ()
    loop (cs, index) <- ([], 0) do
        if index >= getLength l1
            then break cs
            else do
                item1 <- atIndex l1 index
                item2 <- atIndex l2 index
                c <- f item1 item2
                (push cs c, index + 1)

@Inline
zipS s a b :: s -> [a] -> [b] -> (s -> a -> b -> s) -> s
zipS s l1 l2 f = do
    if getLength l1 != getLength l2
        then panic "zipS: length mismatch {} != {}" % (getLength l1, getLength l2)
        else ()
    loop (s, index) <- (s, 0) do
        if index >= getLength l1
            then break s
            else do
                item1 <- atIndex l1 index
                item2 <- atIndex l2 index
                s <- f s item1 item2
                (s, index + 1)

@Inline
zipSE s a b :: s -> [a] -> [b] -> (s -> Int -> a -> b -> s) -> s
zipSE s l1 l2 f = do
    if getLength l1 != getLength l2
        then panic "zipSE: length mismatch {} != {}" % (getLength l1, getLength l2)
        else ()
    loop (s, index) <- (s, 0) do
        if index >= getLength l1
            then break s
            else do
                item1 <- atIndex l1 index
                item2 <- atIndex l2 index
                s <- f s index item1 item2
                (s, index + 1)

@Inline
mapS s a b :: s -> [a] -> (s -> a -> (s, b)) -> (s, [b])
mapS s l f = do
    l |> List.iter |> Iterator.fold (\(s, items), i -> do
        (s, i) <- f s i
        (s, items + [i])) (s, [])

@Inline
mapSE s a b :: s -> [a] -> (s -> Int -> a -> (s, b)) -> (s, [b])
mapSE s l f = do
    (s, index, l) <- l |> List.iter |> Iterator.fold (\(s, index, items), i -> do
        (s, i) <- f s index i
        (s, index + 1, items + [i])) (s, 0, [])
    (s, l)

@Inline
mapE a b :: [a] -> (Int -> a -> b) -> [b]
mapE l f = do
    (index, l) <- l |> List.iter |> Iterator.fold (\(index, items), i -> do
        i <- f index i
        (index + 1, items + [i])) (0, [])
    l

@Inline
foldE a b :: (a -> Int -> b -> a) -> a -> [b] -> a
foldE f s l = do
    (s, i) <- l |> List.iter |> Iterator.fold (\(s, index), i -> do
        s <- f s index i
        (s, index + 1)) (s, 0)
    s

@Inline
fold s a :: s -> [a] -> (s -> a -> s) -> s
fold init list f = list |> List.iter |> Iterator.fold f init

@Inline
map a b :: [a] -> (a -> b) -> [b]
map input f = input |> List.iter |> Iterator.map f |> toList

@Inline
filter a :: [a] -> (a -> Bool) -> [a]
filter list f = list |> List.iter |> Iterator.filter f |> toList

// FIXME: use iterator instead
@Inline
filterS s a :: s -> [a] -> (s -> a -> (s, Bool)) -> (s, [a])
filterS state input f = loop (state, result, index) <- (state, List.withCapacity (List.getLength input), 0) do
    if index >= List.getLength input
    then break (state, result)
    else do
        elem <- List.atIndex input index
        (state, match) <- f state elem
        if match
        then (state, List.push result elem, index + 1)
        else (state, result, index + 1)

@Inline
foldM a k v :: (Ord k) => Map k v -> [a] -> (a -> (k, v)) -> Map k v
foldM init list f = List.fold init list (\m, item -> do
    (k, v) <- f item
    (m, _) <- Map.insert m k v
    m)

@Inline
filterMap a b :: [a] -> (a -> Option b) -> [b]
filterMap list f = List.fold [] list (\all, item -> do
    case f item of
        Some item -> all + [item]
        None -> all)

@Inline
filterMapS s a b :: s -> [a] -> (s -> a -> (s, Option b)) -> (s, [b])
filterMapS s list f = List.fold (s, []) list (\(s, all), item -> do
    (s, r) <- f s item
    case r of
        Some item -> (s, all + [item])
        None -> (s, all))

@Inline
flatten a :: [[a]] -> [a]
flatten lists = List.fold [] lists (\s, l -> s + l)

module Map where

data Map k v = extern

instance (Show k, Show v) => Show Map k v where
    show m = do
        size <- getSize m
        (s, _) <- Map.fold ("{", 0) m (\(s, index), (k, v) -> do
            item <- if index + 1 == size
                then "{}:{}" % (k, v)
                else "{}:{}," % (k, v)
            (s + item, index + 1))
        s + "}"

instance (PartialEq k, PartialEq v) => PartialEq Map k v where
    opEq k v  :: Map k v -> Map k v -> Bool
    opEq a b = do
        len_a <- getSize a
        len_b <- getSize b
        if len_a != len_b
        then False
        else do
            iter_a :: MapIter k v <- Map.iter a
            iter_b :: MapIter k v <- Map.iter b
            loop zipper <- Iterator.zip iter_a iter_b do
                zipper :: IteratorZip (MapIter k v) (MapIter k v) <- zipper // FIXME
                (zipper, item) <- Iterator.next zipper
                case item of
                    Some ((key_a, value_a), (key_b, value_b)) ->
                        if opEq key_a key_b
                        then if opEq value_a value_b
                            then zipper
                            else break False
                        else break False
                    None -> break True

instance (PartialOrd k, PartialOrd v) => PartialOrd Map k v where
    partialCmp k v  :: Map k v -> Map k v -> Option Ordering
    partialCmp a b = do
        len_a <- getSize a
        len_b <- getSize b
        if len_a != len_b
        then partialCmp len_a len_b
        else do
            iter_a :: MapIter k v <- Map.iter a
            iter_b :: MapIter k v <- Map.iter b
            loop zipper <- Iterator.zip iter_a iter_b do
                zipper :: IteratorZip (MapIter k v) (MapIter k v) <- zipper // FIXME
                (zipper, item) <- Iterator.next zipper
                case item of
                    Some ((key_a, value_a), (key_b, value_b)) ->
                        case partialCmp key_a key_b of
                            Some Equal -> case partialCmp value_a value_b of
                                Some Equal -> zipper
                                e -> break e
                            e -> break e
                    None -> break Some Equal

instance (Ord k, Ord v) => Ord Map k v where
    cmp k v  :: Map k v -> Map k v -> Ordering
    cmp a b = do
        len_a <- getSize a
        len_b <- getSize b
        if len_a != len_b
        then cmp len_a len_b
        else do
            iter_a :: MapIter k v <- Map.iter a
            iter_b :: MapIter k v <- Map.iter b
            loop zipper <- Iterator.zip iter_a iter_b do
                zipper :: IteratorZip (MapIter k v) (MapIter k v) <- zipper // FIXME
                (zipper, item) <- Iterator.next zipper
                case item of
                    Some ((key_a, value_a), (key_b, value_b)) ->
                        case cmp key_a key_b of
                            Equal -> case cmp value_a value_b of
                                Equal -> zipper
                                e -> break e
                            e -> break e
                    None -> break Equal

instance (Eq k, Eq v) => Eq Map k v

empty k v :: (Ord k) => ~Map k v
empty = extern

insert k v :: (Ord k) => Map k v -> k -> v -> ~(~Map k v, ~Option v)
insert m k v = extern (arg[1] -> result.f[0].e[0],
                       arg[2] -> result.f[0].e[1],
                       arg[0].e[0] == result.f[0].e[0],
                       arg[0].e[1] == result.f[0].e[1],
                       arg[0].e[1] == result.f[1].v[0].f[0])

@Inline
put k v :: (Ord k) => Map k v -> k -> v -> Map k v
put m k v = do
    (m, _) <- insert m k v
    m

get k v :: (Ord k) => Map k v -> k -> ~Option v
get m k = extern (arg[0].e[1] -> result.v[0].f[0], arg[1] == *)

remove k v :: (Ord k) => Map k v -> k -> ~(~Map k v, ~Option v)
remove m k = extern (arg[1] == *)

@Inline
alter k v :: (Ord k) => (Option v -> Option v) -> k -> Map k v -> (Map k v, Option v)
alter f k m = // FIXME: make this builtin and much faster
    case f (get m k) of
        Some v -> insert m k v
        None -> remove m k

@Inline
alter2 k v :: (Ord k) => (Option v -> Option v) -> k -> Map k v -> (Map k v, Option v)
alter2 f k m = do // FIXME: this is an ugly hack to make it faster (do not copy prev)
    (m, prev) <- remove m k
    v <- f prev
    case v of
        Some v -> insert m k v
        None -> (m, None)

@Inline
alterS si so k v :: (Ord k) => (si -> Option v -> (so, Option v)) -> si -> k -> Map k v -> (so, Map k v, Option v)
alterS f s k m = do
    (s, v) <- f s (get m k)
    case v of
        Some v -> do
            (m, v) <- insert m k v
            (s, m, v)
        None -> do
            (m, v) <- remove m k
            (s, m, v)

@Inline
add k v :: (Ord k) => Map k [v] -> k -> v -> Map k ([v])
add m k v = do
    (m, _) <- alter (\old -> case old of
                        Some vs -> Some (push vs v)
                        None -> Some ([v])) k m
    m

@Inline
addS s k v :: (Ord k) => s -> k -> Map k v -> (s -> k -> (s, v)) -> (s, v, Map k v)
addS s k m f = do
    ((s, v), m, _) <- alterS (\s, old -> case old of
            Some v -> ((s, v), Some v)
            None -> do
                (s, v) <- f s k
                ((s, v), Some v)) s k m
    (s, v, m)

data MapIter k v = { inner :: MapIterator k v }

instance Iterator (MapIter k v) > (k, v) where
    next iter = do
        (inner, item) <- Map.nextItem iter.inner
        iter <- iter { inner = inner }
        case item of
            Some a -> (iter, Some a)
            None -> (iter, None)

@Inline
iter k v :: Map k v -> MapIter k v
iter m = MapIter (intoIter m)

data MapIterator k v = extern (implicit)

intoIter k v :: Map k v -> ~MapIterator k v
intoIter m = extern (arg[0] -> result.i[0])

nextItem k v :: MapIterator k v -> ~(~MapIterator k v, ~Option (k, v))
nextItem iter = extern (arg[0].i[0].e[0] -> result.f[1].v[0].f[0].f[0],
                        arg[0].i[0].e[1] -> result.f[1].v[0].f[0].f[1],
                        arg[0].i[0] == result.f[0].i[0],
                        arg[0].i[0].e[0] == result.f[0].i[0].e[0],
                        arg[0].i[0].e[1] == result.f[0].i[0].e[1])

@Inline
toMap it k v :: (Iterator it > (k, v), Ord k) => it -> Map k v
toMap iter = Iterator.fold (\m, (k, v) -> do
    (m, _) <- insert m k v
    m) empty iter

getSize k v :: Map k v -> ~Int
getSize m = extern

@Inline
getKeys k v :: Map k v -> [k]
getKeys m = m |> Map.iter |> Iterator.fold (\keys, (k, _) -> keys + [k]) []

update k v :: (Ord k) => Map k v -> ((k, v) -> v) -> Map k v
update m f = Map.map m (\(k, v) -> do
    v <- f (k, v)
    (k, v))
// TODO, FIXME: make this extern

updateS s k v :: (Ord k) => s -> Map k v -> (s -> (k, v) -> (s, v)) -> (s, Map k v)
updateS s m f = Map.mapS s m (\s, (k, v) -> do
    (s, v) <- f s (k, v)
    (s, k, v))
// TODO, FIXME: make this extern

@Inline
fold s k v :: s -> Map k v -> (s -> (k, v) -> s) -> s
fold init m f = m |> Map.iter |> Iterator.fold f init

@Inline
map k1 v1 k2 v2 :: (Ord k1, Ord k2) => Map k1 v1 -> ((k1, v1) -> (k2, v2)) -> Map k2 v2
map input f = input |> Map.iter |> Iterator.map f |> toMap

@Inline
mapS s k1 v1 k2 v2 :: (Ord k1, Ord k2) => s -> Map k1 v1 -> (s -> (k1, v1) -> (s, k2, v2)) -> (s, Map k2 v2)
mapS s m f = do
    m |> Map.iter |> Iterator.fold (\(s, m2), (k, v) -> do
        (s, k, v) <- f s (k, v)
        (m2, _) <-insert m2 k v
        (s, m2)) (s, Map.empty)

@Inline
filter k v :: (Ord k) => Map k v -> ((k, v) -> Bool) -> Map k v
filter map f = map |> Map.iter |> Iterator.filter f |> toMap

module Option where

data Option a = Some a | None deriving (PartialEq, Eq, PartialOrd, Ord, Show)

@Inline
isSome a :: Option a -> Bool
isSome o = case o of
    Some _ -> True
    None -> False

@Inline
isNone a :: Option a -> Bool
isNone o = case o of
    Some _ -> False
    None -> True

@Inline
unwrap a :: Option a -> a
unwrap o = case o of
    Some a -> a
    None -> panic "Option unwrap called on None"

@Inline
expect a ::  Option a -> String -> a
expect o msg = case o of
    Some a -> a
    None -> panic "Option expect failed: {}" % msg

module Ordering where

data Ordering = Less | Equal | Greater deriving (PartialEq, Eq, PartialOrd, Ord, Show)

module Rc where

data Rc a = extern

create a :: a -> ~Rc ~a
create item = extern

get a :: Rc a -> a
get rc = extern (arg[0] -> result)

instance (Show a) => Show Rc a where
    show a = show (get a)

instance (PartialEq a) => PartialEq Rc a where
    opEq a :: Rc a -> Rc a -> Bool
    opEq a b = opEq (get a) (get b)

instance (Eq a) => Eq Rc a

instance (PartialOrd a) => PartialOrd Rc a where
    partialCmp a :: Rc a -> Rc a -> Option Ordering
    partialCmp a b = partialCmp (get a) (get b)

instance (Ord a) => Ord Rc a where
    cmp a :: Rc a -> Rc a -> Ordering
    cmp a b = cmp (get a) (get b)

module Result where

data Result ok err = Ok ok | Err err deriving (PartialEq, Eq, PartialOrd, Ord, Show)

@Inline
unwrap ok err :: Result ok err -> ok
unwrap r = case r of
    Ok ok -> ok
    Err err -> panic "Result unwrap called on err"

module Set where

data Set a = { items :: [a] } deriving (Show)

instance (Ord a) => Add Set a where
    opAdd a b = Set ((a.items + b.items) |> List.sort |> List.dedup)

instance (Ord a) => Sub Set a where
    opSub a b = do
        items <- a.items |> List.iter |> Iterator.filter (\i -> not (Set.contains b i)) |> List.toList
        Set { items = items }

instance (PartialEq a) => PartialEq Set a where
    opEq a b = a.items == b.items

instance (Eq a) => Eq Set a

instance (PartialOrd a) => PartialOrd Set a where
    partialCmp a b = partialCmp a.items b.items

// FIXME: Ord should imply the rest!
instance (Ord a, PartialEq a, PartialOrd a, Eq a) => Ord Set a where
    cmp a b = cmp a.items b.items

empty a :: Set a
empty = Set []

contains a :: (PartialEq a) => Set a -> a -> Bool
contains set item = List.contains set.items item

insert a :: (Ord a) => Set a -> a -> (Set a, Bool)
insert set item = do
    len <- List.getLength set.items
    items <- set.items + [item]
    items <- items |> List.sort |> List.dedup
    inserted <- len != List.getLength items
    (set { items = items }, inserted)

remove a :: (PartialEq a) => Set a -> a -> Set a
remove set item = do
    items <- set.items |> List.iter |> Iterator.filter (\i -> i != item) |> List.toList
    set { items = items }

iter a :: Set a -> List.ListIter a
iter set = set.items |> List.iter

toSet it a :: (Iterator it > a, Ord a) => it -> Set a
toSet iter = Set (List.toList iter |> List.sort |> List.dedup)

isEmpty a :: Set a -> Bool
isEmpty set = List.isEmpty set.items

collect a b :: [b] -> Set a -> (Set a -> b -> Set a) -> Set a
collect sources result f =
    loop result <- result do
        start_size <- Set.getSize result
        result <- List.fold result sources f
        if Set.getSize result != start_size
        then result
        else break result

getSize a :: Set a -> Int
getSize set = List.getLength set.items

intersection a :: (PartialEq a) => Set a -> Set a -> Set a
intersection s1 s2 = do
    items <- s1.items |> List.iter |> Iterator.filter (\i -> Set.contains s2 i) |> List.toList
    Set { items = items }

put a :: (PartialEq a, Ord a) => Set a -> a -> Set a
put set item = do
    (set, _) <- insert set item
    set

map a b :: (Ord a, PartialEq a, Ord b, PartialEq b) => Set a -> (a -> b) -> Set b
map set f = set |> Set.iter |> Iterator.map f |> toSet

fold a s :: (Ord a, PartialEq a) => s -> Set a -> (s -> a -> s) -> s
fold init set f = set |> Set.iter |> Iterator.fold f init

module Std.Intrinsics where

class Copy a
class Move a

module Std.Ops where

class Add a where
    opAdd a :: a -> a -> a

class Sub a where
    opSub a :: a -> a -> a

class Mul a where
    opMul a :: a -> a -> a

class Div a where
    opDiv a :: a -> a -> a

class (PartialEq a) => PartialOrd a where
    partialCmp a :: a -> a -> Option Ordering

    opLessThan a :: a -> a -> Bool
    opLessThan a b = case partialCmp a b of
                        Some Less -> True
                        _ -> False

    opLessEqual a :: a -> a -> Bool
    opLessEqual a b = case partialCmp a b of
                         Some Less -> True
                         Some Equal -> True
                         _ -> False

    opGreaterThan a :: a -> a -> Bool
    opGreaterThan a b = case partialCmp a b of
                         Some Greater -> True
                         _ -> False

    opGreaterEqual a :: a -> a -> Bool
    opGreaterEqual a b = case partialCmp a b of
                         Some Greater -> True
                         Some Equal -> True
                         _ -> False

class PartialEq a where
    opEq a :: a -> a -> Bool
    opNotEq a :: a -> a -> Bool
    opNotEq a b = not (opEq a b)

class (PartialEq a) => Eq a

class (PartialOrd a, Eq a) => Ord a where
    cmp a :: a -> a -> Ordering

    max a :: a -> a -> a
    max a b = if a >= b then a else b

    min a :: a -> a -> a
    min a b = if a <= b then a else b

class Show a where
    show a :: a -> String

class Negative a where
    opNegative a :: a -> a

opAnd :: ~Bool -> ~Bool -> ~Bool
opAnd a b = extern

opOr :: ~Bool -> ~Bool -> ~Bool
opOr a b = extern

opNot :: ~Bool -> ~Bool
opNot a  = not a

getDiscriminant a :: ~a -> ~Int
getDiscriminant a = extern

instance Show () where
    show _ = "()"

instance (Show a) => Show (a,) where
    show (a,) = "({},)" % a

instance (Show a, Show b) => Show (a, b) where
    show (a, b) = "({}, {})" % (a, b)

instance (Show a, Show b, Show c) => Show (a, b, c) where
    show (a, b, c) = "({}, {}, {})" % (a, b, c)

instance (Show a, Show b, Show c, Show d) => Show (a, b, c, d) where
    show (a, b, c, d) = "({}, {}, {}, {})" % (a, b, c, d)

module Std.Util.Basic(not,
                      print,
                      println,
                      abort,
                      unimplemented,
                      unreachable,
                      unwrap,
                      panic,
                      repeat,
                      repeatS,
                      repeatSE) where

not :: Bool -> Bool
not a = if a then False
             else True

@Inline
print a :: (Show a) => a -> ()
print msg = printStr "{}" % msg

@Inline
println a :: (Show a) => a -> ()
println msg = printStr "{}\n" % msg

printStr :: String -> ~()
printStr msg = extern

abort :: !
abort = extern (result == *)

unimplemented :: !
unimplemented = panic "unimplemented code called"

unreachable :: !
unreachable = panic "unreachable code called"

unwrap a b :: Result a b -> a
unwrap a = case a of
            Ok a -> a
            Err _ -> abort

panic a :: (Show a) => a -> !
panic msg = do
    println msg
    abort

@Inline
repeat a :: a -> Int -> [a]
repeat item count = do
    (items, _) <- loop (items, c) <- ([], 0) do
                if c < count
                    then (items + [item], c + 1) else break (items, 0)
    items

@Inline
repeatS s a :: s -> (s -> (s, a)) -> Int -> (s, [a])
repeatS state fn count = do
    loop (state, items, c) <- (state, [], 0) do
        if c < count
            then do
                (state, item) <- fn state
                (state, items + [item], c + 1)
            else break (state, items)

@Inline
repeatSE s a :: s -> (s -> Int -> (s, a)) -> Int -> (s, [a])
repeatSE state fn count = do
    loop (state, items, c) <- (state, [], 0) do
        if c < count
            then do
                (state, item) <- fn state c
                (state, items + [item], c + 1)
            else break (state, items)

@Inline
repeatE a :: (Int -> a) -> Int -> [a]
repeatE fn count = do
    loop (items, c) <- ([], 0) do
        if c < count
            then do
                (item) <- fn c
                (items + [item], c + 1)
            else break items


module Std.Util where

assert :: ~Bool -> ~()
assert value = extern

module String(String, chars, split, replace, startsWith, endsWith) where

data String = extern

chars :: ~String -> ~[~Char]
chars s = extern

split :: ~String -> ~String -> ~[~String]
split input sep = extern

replace :: ~String -> ~String -> ~String -> ~String
replace source from to = extern

startsWith :: String -> String -> ~Bool
startsWith self start = extern

endsWith :: String -> String -> ~Bool
endsWith self end = extern

instance Add String where
    opAdd a b = addString a b

instance PartialOrd String where
    partialCmp a b = partialCmpString a b

instance Ord String where
    cmp a b = cmpString a b

instance PartialEq String where
    opEq a b = eqString a b

instance Eq String

instance Show String where
    show a = a

addString :: String -> String -> ~String
addString a b = extern

eqString :: String -> String -> ~Bool
eqString a b = extern

partialCmpString :: String -> String -> ~Option (~Ordering)
partialCmpString a b = extern

cmpString :: String -> String -> ~Ordering
cmpString a b = extern
